/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Product search
         * @description Allows you to find products by passing in either a search term or product Id.
         *
         *     ### Initial Search Value Required
         *
         *     An initial search value is requred for all requests. You can use either of the following parameters as an initial search value:
         *
         *     `filter.term` - When using the term parameter, the API performs a fuzzy search based on the term provided in the string. Search results are based on how relevant the term is to the product description.
         *
         *     `filter.brand` - When using the brand parameter, the API performs a search based on the brand provided in the string. Search results only contain products that match the brand queried for.
         *
         *     `filter.productId` - When using the productId parameter, the API performs a query to find an exact match. The format for the productId is a 13 digit number.
         *
         *      NOTE: If converting from a barcode omit the check digit.
         *
         */
        get: operations["productGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Product details
         * @description Provides access to the details of a specific product by using the 13 digit `productId`. If converting from a barcode omit the check digit.
         *
         *      To return the product price, availability, and aisle location, you must include the `filter.locationId` query parameter.
         */
        get: operations["productGetID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Invalid_locationId: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Field 'locationId' must have a length of 8 characters */
            reason?: string;
        };
        Invalid_limit: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Field 'limit' must be a number between 1 and 200 (inclusive) */
            reason?: string;
        };
        Invalid_parameter: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Invalid parameters */
            reason?: string;
        };
        Invalid_UPC: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example UPC must have a length of 13 characters */
            reason?: string;
        };
        APIError: {
            timestamp?: number;
            code?: string;
            reason?: string;
        };
        "APIError.unauthorized": {
            errors?: {
                /** @example The access token is invalid or has expired */
                error_description?: string;
                /** @example invalid_token */
                error?: string;
            };
        };
        "APIError.forbidden": {
            errors?: {
                /** @example missing required scopes */
                reason?: string;
                /** @example Forbidden */
                code?: string;
                /** @example 1564143270221 */
                timestamp?: number;
            };
        };
        "APIError.products.serverError": {
            errors?: {
                /** @example Internal server error */
                reason?: string;
                /** @example PRODUCT-4xxx-xxx */
                code?: string;
                /** @example 1564159296910 */
                timestamp?: number;
            };
        };
        /**
         * @description The productId of the product to return.
         * @example 0001111060903
         */
        productId: string;
        "products.productModel": {
            /**
             * @description The UPC of the product.
             * @example 0001111041700
             */
            productId?: string;
            /**
             * @description The URI of the product page.
             * @example /p/kroger-2-reduced-fat-milk/0001111041700?cid=dis.api.tpi_products-api_20240521_b:all_c:p_t:
             */
            productPageURI?: string;
            aisleLocations?: components["schemas"]["products.productAisleLocationModel"][];
            /**
             * @description The brand name of the product.
             * @example Kroger
             */
            brand?: string;
            /** @description The category the product belongs to. */
            categories?: string[];
            /**
             * @description The country of origin of the product.
             * @example United States
             */
            countryOrigin?: string;
            /**
             * @description The name of the product.
             * @example Kroger 2% Reduced Fat Milk
             */
            description?: string;
            items?: components["schemas"]["products.productItemModel"][];
            itemInformation?: components["schemas"]["products.productBoxedDimensionsModel"];
            temperature?: components["schemas"]["products.productTemperatureModel"];
            images?: components["schemas"]["products.productImageModel"][];
            /**
             * @description The UPC of the product.
             * @example 0001111041700
             */
            upc?: string;
        };
        "products.productPayloadModel": {
            data?: components["schemas"]["products.productModel"];
            meta?: Record<string, never>;
        };
        "products.productsPayloadModel": {
            data?: components["schemas"]["products.productModel"][];
            meta?: Record<string, never>;
        };
        "products.productAisleLocationModel": {
            /**
             * @description The bay number of the aisle.
             * @example 13
             */
            bayNumber?: string;
            /**
             * @description The location in the store.
             * @example Aisle 35
             */
            description?: string;
            /**
             * @description The aisle number in the store.
             * @example 35
             */
            number?: string;
            /**
             * @description The number of facings.
             * @example 5
             */
            numberOfFacings?: string;
            /**
             * @description The sequence of the aisle in the store.
             * @example 3
             */
            sequenceNumber?: string;
            /**
             * @description The side of the aisle where the product is located.
             * @example L
             */
            side?: string;
            /**
             * @description The shelf number in the aisle.
             * @example 2
             */
            shelfNumber?: string;
            /**
             * @description The position of the shelf in the bay.
             * @example 1
             */
            shelfPositionInBay?: string;
        };
        /** @description Information about the product's size. */
        "products.productBoxedDimensionsModel": {
            /**
             * @description The depth of the product.
             * @example 3.5
             */
            depth?: string;
            /**
             * @description The height of the product.
             * @example 2.0
             */
            height?: string;
            /**
             * @description The length of the product.
             * @example 4.75
             */
            width?: string;
        };
        "products.productItemModel": {
            /**
             * @description The UPC of the item.
             * @example 0001111041700
             */
            itemId?: string;
            inventory?: components["schemas"]["products.productItemInventoryModel"];
            favorite?: boolean;
            fulfillment?: components["schemas"]["products.productItemFulfillmentModel"];
            price?: components["schemas"]["products.productItemPriceModel"];
            nationalPrice?: components["schemas"]["products.productItemPriceModel"];
            /**
             * @description A description of the item size.
             * @example 1 gal
             */
            size?: string;
            /**
             * @description Indicates how this item is sold. Values returned are typically either "weight" or "unit"
             * @example unit
             */
            soldBy?: string;
        };
        "products.productItemInventoryModel": {
            /**
             * @description Indicates the level of stock.
             * @example HIGH
             * @enum {string}
             */
            stockLevel?: "HIGH" | "LOW" | "TEMPORARILY_OUT_OF_STOCK";
        };
        "products.productItemFulfillmentModel": {
            /** @description Indicates if the product is available for curbside pickup. */
            curbside?: boolean;
            /** @description Indicates if the product is available for home delivery. */
            delivery?: boolean;
            /** @description Indicates if the product is available in store. This does not indicate that the item is in stock. */
            instore?: boolean;
            /** @description Indicates if the product is available to be shipped from a fulfillment center. */
            shiptohome?: boolean;
        };
        "products.productItemPriceModel": {
            /**
             * @description The regular price of the item.
             * @example 1.99
             */
            regular?: number;
            /**
             * @description The sale price of the item.
             * @example 1.59
             */
            promo?: number;
            /**
             * @description The estimated price of 1 unit of the item.
             * @example 1.99
             */
            regularPerUnitEstimate?: number;
            /**
             * @description The estimated sale price of 1 unit of the item.
             * @example 1.59
             */
            promoPerUnitEstimate?: number;
        };
        /** @description Information about the product's image. */
        "products.productImageModel": {
            /** @description An optional identifier of the image size. */
            id?: string;
            /**
             * @description A description of the product image view.
             * @example front
             */
            perspective?: string;
            default?: boolean;
            /** @description An array of image sizes. */
            sizes?: components["schemas"]["products.productImageSizeModel"][];
        };
        /** @description Information about the product's image. */
        "products.productImageSizeModel": {
            /**
             * @description An optional identifier of the image size.
             * @example 7df2d0a3-8349-44d4-9512-1dab89e675a9
             */
            id?: string;
            /**
             * @description A description of the image size.
             * @example medium
             */
            size?: string;
            /**
             * @description The URL location of the image.
             * @example https://www.kroger.com/product/images/medium/front/0001111041700
             */
            url?: string;
        };
        /** @description Information about the item's temperature requirements. */
        "products.productTemperatureModel": {
            /**
             * @description Information about the product's storage temperature.
             * @example Refrigerated
             */
            indicator?: string;
            /** @description Indicates if the item is heat sensitive. */
            heatSensitive?: boolean;
        };
        /**
         * @description The UPC of the product to return.
         * @example 0001111060903
         */
        UPC: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    productGet: {
        parameters: {
            query?: {
                /**
                 * @description A search term to filter product results. As an example, you could input _milk_, _bread_, or _salt_. <br><br><b>Note</b> - Search terms are limited to a maximum of 8 words. Each new space in the search term denotes a new word.
                 * @example milk
                 */
                "filter.term"?: string;
                /**
                 * @description The locationId of the location. When using this filter, only products available at that location are returned.
                 * @example 01400943
                 */
                "filter.locationId"?: string;
                /**
                 * @description The productId of the products(s) to return. For more than one item, the list must be comma-separated. When used, all other query parameters are ignored.
                 * @example 0001111060903
                 */
                "filter.productId"?: string;
                /**
                 * @description The brand name of the products to return. When using this filter, only products by that brand are returned. Brand names are case-sensitive, and lists must be pipe-separated.
                 * @example Kroger
                 */
                "filter.brand"?: string;
                /** @description 'The available fulfillment types of the product(s) to return.
                 *     Fulfillment types are case-sensitive, and lists must be comma-separated.
                 *     Must be one or more of the follow types: <ul> <li> `ais` - Available In
                 *     Store</li> <li> `csp` - Curbside Pickup</li> <li> `dth` - Delivery To Home</li>
                 *     <li> `sth` - Ship To Home</li> </ui>'
                 *      */
                "filter.fulfillment"?: "ais" | "csp" | "dth" | "sth";
                /** @description The number of products to skip. */
                "filter.start"?: number;
                /** @description The number of products to return. */
                "filter.limit"?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["products.productsPayloadModel"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"] | components["schemas"]["Invalid_locationId"] | components["schemas"]["Invalid_parameter"] | components["schemas"]["Invalid_limit"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.forbidden"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.products.serverError"];
                };
            };
        };
    };
    productGetID: {
        parameters: {
            query?: {
                /**
                 * @description The locationId of the location. When using this filter, only products available at that location are returned.
                 * @example 01400943
                 */
                "filter.locationId"?: string;
            };
            header?: never;
            path: {
                /** @description The id of the product */
                id: components["schemas"]["productId"] | components["schemas"]["UPC"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["products.productPayloadModel"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"] | components["schemas"]["Invalid_locationId"] | components["schemas"]["Invalid_UPC"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.forbidden"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.products.serverError"];
                };
            };
        };
    };
}
