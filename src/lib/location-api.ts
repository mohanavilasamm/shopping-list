/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Location list
         * @description Provides access to a list of locations. If the parameter `filter.chain` is not provided, the results include all locations and chains owned by The Kroger Co.<br>You may include one of the following parameters to narrow search results within a geographic area:<br><br> <ul> <li> <code>filter.zipCode.near</code></li> <li> <code>filter.latLong.near</code></li> <li> <code>filter.lat.near</code> and <code>filter.lon.near</code></li> </ul>
         */
        get: operations["SearchLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/locations/{locationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Location details
         * @description Provides access to the details of a specific location by using the `locationId`.
         */
        get: operations["LocationsGetByID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /**
         * Location query
         * @description Determines if a specific location exists by using the `locationId`.
         */
        head: operations["LocationsExistsByID"];
        patch?: never;
        trace?: never;
    };
    "/v1/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Chain list
         * @description Provides access to a list of all chains owned by The Kroger Co.
         */
        get: operations["ListChains"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/chains/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Chain details
         * @description Provides access to the details of a specific chian by using the chain `name`.
         */
        get: operations["GetChain"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /**
         * Chain query
         * @description Determine if a specific chain exists by using the chain `name`.
         */
        head: operations["ChainExists"];
        patch?: never;
        trace?: never;
    };
    "/v1/departments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Department list
         * @description Provides access to a list of all departments, including departments of chains owned by The Kroger Co.
         */
        get: operations["ListDepartments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/departments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Department details
         * @description Provides access to the details of a specific department by using the `departmentId`.
         */
        get: operations["GetDepartment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /**
         * Department query
         * @description Determine if a specific department exists by using the `departmentId`.
         */
        head: operations["DepartmentExists"];
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        APIError: {
            timestamp?: number;
            code?: string;
            reason?: string;
        };
        "APIError.departmentsId.badRequest": {
            errors?: {
                /** @example Invalid department ID */
                reason?: string;
                /** @example LOCATION-2119 */
                code?: string;
                /** @example 1564159296910 */
                timestamp?: number;
            };
        };
        "APIError.unauthorized": {
            errors?: {
                /** @example The access token is invalid or has expired */
                error_description?: string;
                /** @example invalid_token */
                error?: string;
            };
        };
        "APIError.locations.serverError": {
            errors?: {
                /** @example Internal server error */
                reason?: string;
                /** @example LOCATION-4xxx-xxx */
                code?: string;
                /** @example 1564159296910 */
                timestamp?: number;
            };
        };
        "APIError.noContent": Record<string, never>;
        "APIError.notFound": Record<string, never>;
        "locations.address": {
            /**
             * @description The street address of the location.
             * @example 2900 W. St. Rt. 22 & 3
             */
            addressLine1?: string;
            /**
             * @description An optional secondary address of the location.
             * @example
             */
            addressLine2?: string;
            /**
             * @description The city of the location.
             * @example Maineville
             */
            city?: string;
            /**
             * @description The county of the location.
             * @example WARREN COUNTY
             */
            county?: string;
            /**
             * @description The state or province of the location. US locations use a two-letter codes for states.
             * @example OH
             */
            state?: string;
            /**
             * @description The postal code of the location.
             * @example 45039
             */
            zipCode?: string;
        };
        "locations.chain": {
            /**
             * @description The name of the chain.
             * @example KROGER
             */
            name?: string;
            /**
             * @description A list of all management division numbers within the brand.
             * @example [
             *       "01",
             *       "02"
             *     ]
             */
            divisionNumbers?: string[];
            /**
             * @description The domain of the chain.
             * @example kroger.com
             */
            domain?: string;
            /**
             * @description The friendly name for this chain.
             * @example Baker's
             */
            friendlyBannerName?: string;
            /**
             * @description The default title for this chain.
             * @example Baker's
             */
            defaultTitle?: string;
            /**
             * @description The title extension for this chain.
             * @example Fresh Food. Low Prices. | Shop Groceries Online
             */
            titleExtension?: string;
            /**
             * @description The Apple app ID for this chain.
             * @example app-id=584405207
             */
            appleAppId?: string;
            /**
             * @description The Google app ID for this chain.
             * @example app-id=com.bakersplus.mobile
             */
            googleAppId?: string;
            /**
             * @description The theme color for this chain.
             * @example #ef3e42
             */
            themeColor?: string;
            /**
             * @description The description for this chain.
             * @example Shop low prices on groceries & choose pickup or delivery. Fill prescriptions, save with 100s of digital coupons, get fuel points, cash checks, send money & more at Baker's.
             */
            description?: string;
            /** @description The e-commerce modality capabilities for this chain. */
            modalityCapabilities?: {
                /** @description Flag for if this chain supports e-commerce delivery. */
                delivery?: boolean;
                /** @description Flag for if this chain supports e-commerce in-store shopping. */
                instore?: boolean;
                /** @description Flag for if this chain supports e-commerce pickup. */
                curbside?: boolean;
                /** @description Flag for if this chain supports e-commerce shipping. */
                shiptohome?: boolean;
            };
        };
        "locations.chainResponse": {
            data?: components["schemas"]["locations.chain"];
            meta?: Record<string, never>;
        };
        "locations.chainsResponse": {
            data?: components["schemas"]["locations.chain"][];
            meta?: components["schemas"]["MetaModel"];
        };
        "locations.dailyHours": {
            /**
             * @description The time the department or location opens.
             * @example 05:00
             */
            open?: string;
            /**
             * @description The time the department or location closes.
             * @example 1380
             */
            close?: string;
            /**
             * @description Indicates if the location or department is open 24 hours.
             * @example false
             */
            open24?: boolean;
        };
        "locations.departmentAtLocation": {
            /**
             * @description The 2-digit department code.
             * @example 01
             */
            departmentId?: string;
            /**
             * @description The name of the department.
             * @example Drug & General Merchandise
             */
            name?: string;
            /**
             * @description The phone number of the department.
             * @example 5551234567
             */
            phone?: string;
            hours?: components["schemas"]["locations.departmentHours"];
        };
        "locations.department": {
            /**
             * @description The 2-digit department code.
             * @example 01
             */
            departmentId?: string;
            /**
             * @description The name of the department.
             * @example Drug & General Merchandise
             */
            name?: string;
        };
        "locations.departmentResponse": {
            data?: components["schemas"]["locations.department"];
            meta?: Record<string, never>;
        };
        "locations.departmentsResponse": {
            data?: components["schemas"]["locations.department"][];
            meta?: components["schemas"]["MetaModel"];
        };
        "locations.geoLocation": {
            /**
             * @description The latitude and longitude of the location, comma separated
             * @example 39.3110881,-84.2751167
             */
            latLng?: string;
            /**
             * @description The latitude of the location
             * @example 39.3110881
             */
            latitude?: number;
            /**
             * @description The longitude of the location
             * @example -84.2751167
             */
            longitude?: number;
        };
        "locations.locationHours": {
            /** @description Indicates if the location is open 24 hours. */
            Open24?: boolean;
            /**
             * @description The utc timezone offset from gmt.
             * @example (UTC-05:00) Eastern Time (US Canada)
             */
            gmtOffset?: string;
            /**
             * @description The timezone of the location.
             * @example America/New_York
             */
            timezone?: string;
            friday?: components["schemas"]["locations.dailyHours"];
            monday?: components["schemas"]["locations.dailyHours"];
            saturday?: components["schemas"]["locations.dailyHours"];
            sunday?: components["schemas"]["locations.dailyHours"];
            thursday?: components["schemas"]["locations.dailyHours"];
            tuesday?: components["schemas"]["locations.dailyHours"];
            wednesday?: components["schemas"]["locations.dailyHours"];
        };
        "locations.departmentHours": {
            /**
             * @description Indicates if the location is open 24 hours.
             * @example false
             */
            Open24?: boolean;
            monday?: components["schemas"]["locations.dailyHours"];
            tuesday?: components["schemas"]["locations.dailyHours"];
            wednesday?: components["schemas"]["locations.dailyHours"];
            thursday?: components["schemas"]["locations.dailyHours"];
            friday?: components["schemas"]["locations.dailyHours"];
            saturday?: components["schemas"]["locations.dailyHours"];
            sunday?: components["schemas"]["locations.dailyHours"];
        };
        "locations.location": {
            address?: components["schemas"]["locations.address"];
            /**
             * @description The name of the chain.
             * @example KROGER
             */
            chain?: string;
            /**
             * @description The phone number of the location.
             * @example 5551234567
             */
            phone?: string;
            /** @description The available departments at the location. */
            departments?: components["schemas"]["locations.departmentAtLocation"][];
            geolocation?: components["schemas"]["locations.geoLocation"];
            hours?: components["schemas"]["locations.locationHours"];
            /**
             * @description The 3-digit management division number followed by the 5-digit store number.
             * @example 01400376
             */
            locationId?: string;
            /**
             * @description The 5-digit store number.
             * @example 00376
             */
            storeNumber?: string;
            /**
             * @description The 3-digit management division number.
             * @example 014
             */
            divisionNumber?: string;
            /**
             * @description The name of the location. The name generally consists of the chain followed by a vanity name.
             * @example Kroger Landen
             */
            name?: string;
        };
        "locations.locationSearchResponse": {
            data?: components["schemas"]["locations.location"][];
            meta?: components["schemas"]["MetaModel"];
        };
        "locations.locationResponse": {
            data?: components["schemas"]["locations.location"];
            meta?: components["schemas"]["MetaModel"];
        };
        MetaModel: {
            pagination?: {
                total?: number;
                start?: number;
                limit?: number;
            };
            warnings?: string[];
        };
        Invalid_locationId: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Field 'locationId' must have a length of 8 characters */
            reason?: string;
        };
        Invalid_zipCode: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Field 'filter.zipCode.near' must 5 digits */
            reason?: string;
        };
        Invalid_latLong: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Field 'filter.latLong.near' improper coordinate location, must be on Earth */
            reason?: string;
        };
        Invalid_radiusInMiles: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Field 'filter.radiusInMiles' outside of distance limits, distance range is 1 - 100 miles. */
            reason?: string;
        };
        Invalid_department: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Field 'filter.department' contains invalid department ID(s) */
            reason?: string;
        };
        Invalid_limit: {
            /** @example 1569851999383 */
            timestamp?: number;
            /** @example API-4101-400 */
            code?: string;
            /** @example Field 'limit' must be a number between 1 and 200 (inclusive) */
            reason?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    SearchLocations: {
        parameters: {
            query?: {
                /**
                 * @description The zip code to use as a starting point for results.
                 * @example 45044
                 */
                "filter.zipCode.near"?: string;
                /**
                 * @description The latitude and longitude to use as a starting point for results.
                 * @example 39.306346,-84.278902
                 */
                "filter.latLong.near"?: string;
                /**
                 * @description The latitude to use as a starting point for results.
                 * @example 39.306346
                 */
                "filter.lat.near"?: string;
                /**
                 * @description The longitude to use as a starting point for results.
                 * @example -84.278902
                 */
                "filter.lon.near"?: string;
                /** @description The mile radius of results. This will be ignored if you do not use one of the 3 starting point filters (zipCode, latLong, or lat and lon) */
                "filter.radiusInMiles"?: number;
                /** @description The number of results to return. */
                "filter.limit"?: number;
                /**
                 * @description The chain name of the chain. When using this filter, only stores matching the provided chain name are returned.
                 * @example Kroger
                 */
                "filter.chain"?: string;
                /**
                 * @description The departmentId of the department. Lists must be comma-separated. When using this filter, only stores that have all of the departments provided are returned.
                 * @example 13
                 */
                "filter.department"?: string;
                /**
                 * @description Comma-separated list of locationIds.
                 * @example 01400390
                 */
                "filter.locationId"?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["locations.locationSearchResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"] | components["schemas"]["Invalid_locationId"] | components["schemas"]["Invalid_zipCode"] | components["schemas"]["Invalid_latLong"] | components["schemas"]["Invalid_radiusInMiles"] | components["schemas"]["Invalid_limit"] | components["schemas"]["Invalid_department"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.notFound"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
    LocationsGetByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The locationId of the store.
                 * @example 01400943
                 */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["locations.locationResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"] | components["schemas"]["Invalid_locationId"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.notFound"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
    LocationsExistsByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The locationId of the store.
                 * @example 01400943
                 */
                locationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.noContent"];
                };
            };
            /** @description incorrect locationId format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"] | components["schemas"]["Invalid_locationId"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.notFound"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
    ListChains: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["locations.chainsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
    GetChain: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The name of a chain owned by The Kroger Co. <br><br> **Note**:
                 *     the chain `name` is returned from the [/chains](#operation/ListChains) endpoint
                 *     as `name` and from the [/locations](#operation/SearchLocations) endpoint
                 *     as `chain`.
                 *
                 * @example Kroger
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["locations.chainResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.notFound"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
    ChainExists: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The name of a chain owned by The Kroger Co. <br><br> **Note**:
                 *     the chain `name` is returned from the [/chains](#operation/ListChains) endpoint
                 *     as `name` and from the [/locations](#operation/SearchLocations) endpoint
                 *     as `chain`.
                 *
                 * @example Kroger
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.noContent"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.notFound"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
    ListDepartments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["locations.departmentsResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
    GetDepartment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The departmentId of the department to return.
                 * @example 13
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["locations.departmentResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.departmentsId.badRequest"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.notFound"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
    DepartmentExists: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The departmentId of the department to return.
                 * @example 13
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.noContent"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.departmentsId.badRequest"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.unauthorized"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.notFound"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError.locations.serverError"];
                };
            };
        };
    };
}
